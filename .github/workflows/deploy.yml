name: Deploy Laravel to cPanel via SSH

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    name: üéâ Deploy to cPanel via SSH
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Generate .env file from GitHub secrets
        run: |
          echo "APP_NAME='${{ secrets.APP_NAME }}'" > .env
          echo "APP_ENV=${{ secrets.APP_ENV }}" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "APP_DEBUG=${{ secrets.APP_DEBUG }}" >> .env
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env
          echo "" >> .env
          echo "LOG_CHANNEL=${{ secrets.LOG_CHANNEL }}" >> .env
          echo "LOG_DEPRECATIONS_CHANNEL=${{ secrets.LOG_DEPRECATIONS_CHANNEL }}" >> .env
          echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env
          echo "" >> .env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD='${{ secrets.DB_PASSWORD }}'" >> .env
          echo "" >> .env
          echo "BROADCAST_DRIVER=${{ secrets.BROADCAST_DRIVER }}" >> .env
          echo "CACHE_DRIVER=${{ secrets.CACHE_DRIVER }}" >> .env
          echo "FILESYSTEM_DISK=${{ secrets.FILESYSTEM_DISK }}" >> .env
          echo "QUEUE_CONNECTION=${{ secrets.QUEUE_CONNECTION }}" >> .env
          echo "SESSION_DRIVER=${{ secrets.SESSION_DRIVER }}" >> .env
          echo "SESSION_LIFETIME=${{ secrets.SESSION_LIFETIME }}" >> .env
          echo "" >> .env
          echo "MEMCACHED_HOST=${{ secrets.MEMCACHED_HOST }}" >> .env
          echo "" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "" >> .env
          echo "MAIL_MAILER=${{ secrets.MAIL_MAILER }}" >> .env
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD='${{ secrets.MAIL_PASSWORD }}'" >> .env
          echo "MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}" >> .env
          echo "MAIL_FROM_ADDRESS='${{ secrets.MAIL_FROM_ADDRESS }}'" >> .env
          echo "MAIL_FROM_NAME='${{ secrets.MAIL_FROM_NAME }}'" >> .env
          echo "" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> .env
          echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}" >> .env
          echo "AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}" >> .env
          echo "" >> .env
          echo "PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}" >> .env
          echo "PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}" >> .env
          echo "PUSHER_APP_SECRET=${{ secrets.PUSHER_APP_SECRET }}" >> .env
          echo "PUSHER_HOST=${{ secrets.PUSHER_HOST }}" >> .env
          echo "PUSHER_PORT=${{ secrets.PUSHER_PORT }}" >> .env
          echo "PUSHER_SCHEME=${{ secrets.PUSHER_SCHEME }}" >> .env
          echo "PUSHER_APP_CLUSTER=${{ secrets.PUSHER_APP_CLUSTER }}" >> .env
          echo "" >> .env
          echo "VITE_APP_NAME='${{ secrets.APP_NAME }}'" >> .env
          echo "VITE_PUSHER_APP_KEY=${{ secrets.VITE_PUSHER_APP_KEY }}" >> .env
          echo "VITE_PUSHER_HOST=${{ secrets.VITE_PUSHER_HOST }}" >> .env
          echo "VITE_PUSHER_PORT=${{ secrets.VITE_PUSHER_PORT }}" >> .env
          echo "VITE_PUSHER_SCHEME=${{ secrets.VITE_PUSHER_SCHEME }}" >> .env
          echo "VITE_PUSHER_APP_CLUSTER=${{ secrets.VITE_PUSHER_APP_CLUSTER }}" >> .env

      # Only run key:generate if APP_KEY is not already set
      - name: Generate application key if not set
        run: |
          if [ -z "$APP_KEY" ] || [ "$APP_KEY" == "base64:base64:" ]; then
            php artisan key:generate --force
          fi
        env:
          APP_KEY: ${{ secrets.APP_KEY }}

      - name: Build assets (if using Laravel Mix)
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run build
          fi

      - name: Remove unnecessary files
        run: |
          rm -rf node_modules
          rm -rf .git
          rm -rf .github

      - name: üìÇ Upload files via SSH
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./*"
          target: ${{ secrets.SSH_TARGET_DIR }}

      - name: Create database backup and run migrations
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Navigate to the application directory
            cd ${{ secrets.SSH_TARGET_DIR }}

            # Set proper permissions
            # find . -type d -exec chmod 755 {} \;
            # find . -type f -exec chmod 644 {} \;
            # chmod -R 775 storage
            # chmod -R 775 bootstrap/cache
            # chmod -R 755 public

            # Create storage link if it doesn't exist
            if [ ! -L public/storage ]; then
              php artisan storage:link
            fi

            # # Create backups directory if it doesn't exist
            # mkdir -p backups

            # # Create database backup with proper error handling
            # echo "Creating database backup..."
            # if command -v mysqldump >/dev/null 2>&1; then
            #   BACKUP_FILE="backups/backup_$(date +%Y%m%d_%H%M%S).sql"
            #   if mysqldump -h "${{ secrets.DB_HOST }}" \
            #               -u "${{ secrets.DB_USERNAME }}" \
            #               -p"${{ secrets.DB_PASSWORD }}" \
            #               --single-transaction \
            #               --routines \
            #               --triggers \
            #               --no-tablespaces \
            #               "${{ secrets.DB_DATABASE }}" > "$BACKUP_FILE" 2>/dev/null; then
            #     echo "‚úÖ Database backup created successfully: $BACKUP_FILE"
            #   else
            #     echo "‚ö†Ô∏è  Database backup failed, but continuing deployment..."
            #     echo "This might be due to insufficient MySQL privileges."
            #   fi
            # else
            #   echo "‚ö†Ô∏è  mysqldump not available, skipping database backup"
            # fi

            # Install/update Composer dependencies on server
            if [ -f composer.json ]; then
              echo "Installing/updating Composer dependencies..."
              composer install --no-dev --optimize-autoloader --no-interaction
            fi

            # Clear any existing caches
            echo "Clearing application caches..."
            php artisan config:clear || echo "Config clear failed"
            php artisan route:clear || echo "Route clear failed"
            php artisan view:clear || echo "View clear failed"
            php artisan cache:clear || echo "Cache clear failed"

            # Check current migration status
            echo "Checking current migration status..."
            php artisan migrate:status

            # Run migrations
            echo "Running database migrations..."
            if php artisan migrate --force; then
              echo "‚úÖ Migrations completed successfully"
            else
              echo "‚ùå Migration failed!"
              exit 1
            fi

            # Optimize application
            echo "Optimizing application..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan google-fonts:fetch

            # Test database connection
            echo "Testing database connection..."
            if php artisan tinker --execute="DB::connection()->getPdo(); echo 'Database connection successful';" 2>/dev/null; then
              echo "‚úÖ Database connection test passed"
            else
              echo "‚ö†Ô∏è  Database connection test failed"
            fi

            # Final verification
            echo "Performing final application verification..."
            php artisan about || echo "Application info command failed"

            echo "üéâ Deployment completed successfully!"

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.SSH_TARGET_DIR }}

            # Check if application is accessible
            echo "Performing final health checks..."

            # Check if .env exists
            if [ -f .env ]; then
              echo "‚úÖ Environment file exists"
            else
              echo "‚ùå Environment file missing"
            fi

            # Check storage permissions
            if [ -w storage ]; then
              echo "‚úÖ Storage directory is writable"
            else
              echo "‚ùå Storage directory is not writable"
            fi

            # Check if vendor directory exists
            if [ -d vendor ]; then
              echo "‚úÖ Vendor directory exists"
            else
              echo "‚ùå Vendor directory missing"
            fi

            echo "Health check completed!"